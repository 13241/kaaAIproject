*>current

problematique radar : tester la direction qui n'est pas la direction précédente, si y'a moyen de faire plus court par la, 
créer un héritage spécial avec comme unique direction de recherche l'héritage moins la direction opposée a celle qui a réussi.

coder la fonction radar
minimize : ne gère que les déplacements, comportement doit changer un peu avec l'action (objective)
fonction pour push à partir d'une certaine case (sur plusieurs cases) hors state objective (pour les objectifs "pousser villageois dangereux"
imaginer comment gérer plusieurs pions à la fois
_stateObjective meilleur moyen de la faire?
liste de priorités, liste par priorité ? combien de niveaux de priorité?

#suspens => problème des string/entiers dans les coordonnées... relire tout pour la cohérence.
#suspens => WARNING = en cas d'annulation d'un kill d'assassin, modifier TESTSECONDKILL et KILLCOUNTER

#corrige => règle : le joueur assassin ne peut tuer que 2 chevaliers par tour à ajouter dans les règles
#corrige => règle : 3 assassins max
#corrige => déplacement assassinat dans _stateObjective
#corrige => gérer les pushs des chevaliers avec la methode de pathfinding
#corrige => transformer tous les tuples des méthodes multi-retour en dictionnaires
	et adapter en conséquence. (fastidieux mais nécessaire pour la lisibilité
	et la cohérence)
#corrige => rien ne gere le cout des actions?
#corrige => rien ne gere l'autorisation d'arreter des chevaliers?
#corrige => rien ne gere le push des chevaliers
#corrige => les indices negatifs sont possibles (teleport du chevalier de l'autre cote de la map)
#corrige => kill/arrest d'en bas?

mouvements roi : 19 (11*1 + 4*2)
mouvements che : 91 ( 8*5 + 5*6 + 3*7)
mouvements vil : 68 ( 8*5 + 7*4)
captures       :  7 (5*165 + 1*154 + 1*155)

Move: {"assassins":["monk","hooker","fishwoman"]}
Move: {"actions":[]}

all : {"actions":[["move",9,8,"W"]]}
assa: {"actions":[["reveal",y,x]]}
assa: {"actions":[["attack",y,x,dir]]}
knig: {"actions":[["arrest",y,x,dir]]}
askn: {"actions":[["kill",y,x,dir]]}

dir: WNES
y,x:: [0,9]
assassins: 'monk', 'plumwoman', 'appleman', 'hooker', 'fishwoman', 'butcher',
	'blacksmith', 'shepherd', 'squire', 'carpenter', 'witchhunter', 'farmer'

G - G = 1 \ALL
R - R = 1 \ALL
R - G = 1 \ALL/ASSASSIN (king is already treated)
R - G = 0 \ASSASSIN
G - R = 2 \ALL/ASSASSIN (king is already treated)
G - R = 1 \ASSASSIN

assassins : 7 1, 2 1, 1 7

algorithme : 
evaluer la zone de danger pour les pions intéressants du joueur
eviter les dangers si possible (en reculant ou en eliminant la source du danger)
mouvement de base assassins => en position
chevaliers se deplacent pour laisser passer le roi
roi se deplace vers une porte

avant chaque deplacement, evaluer les nouveaux dangers si besoin (surtout pour le roi)
assassins préfèrent reculer, sauf si attaque sur le roi possible